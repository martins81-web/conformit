{"remainingRequest":"D:\\test conformit\\conformit\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\test conformit\\conformit\\src\\components\\MyEvents.vue?vue&type=style&index=0&id=fdd4e0d6&scoped=true&lang=scss&","dependencies":[{"path":"D:\\test conformit\\conformit\\src\\components\\MyEvents.vue","mtime":1625016501794},{"path":"D:\\test conformit\\conformit\\node_modules\\css-loader\\dist\\cjs.js","mtime":1611100555900},{"path":"D:\\test conformit\\conformit\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1625002961797},{"path":"D:\\test conformit\\conformit\\node_modules\\postcss-loader\\src\\index.js","mtime":1602970961387},{"path":"D:\\test conformit\\conformit\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1625004539762},{"path":"D:\\test conformit\\conformit\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1625016956083},{"path":"D:\\test conformit\\conformit\\node_modules\\vue-loader\\lib\\index.js","mtime":1625002961797}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZXZlbnRCdXR0b24gewogIG1hcmdpbi10b3A6IDE1cHg7CiAgcGFkZGluZy10b3A6IDIwcHg7CiAgcGFkZGluZy1ib3R0b206IDIwcHg7Cn0K"},{"version":3,"sources":["MyEvents.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;AACA;AACA;AACA","file":"MyEvents.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"html\">\n\n  <section class=\"my-events\">\n    <h1>Mes évènements</h1>\n    <b-container fluid>\n      <b-row> \n        <b-col xl=\"12\"  v-for=\"(event, i) in events\" :key=\"i\" >\n          <b-button class='eventButton' block  :variant=\"[selectedEvent===event ? 'outline-success' : 'outline-secondary' ]\" v-on:click=\"onClickButton(event)\">\n            {{event.title}}\n          </b-button>\n        </b-col>  \n      </b-row>\n    </b-container>\n  </section>\n</template>\n\n<script lang=\"js\">\n\nimport {getAllEvents} from '../data';\n\n  export default  {\n    name: 'my-events',\n    props: [],\n    mounted () {\n\n    },\n    data () {\n      return {\n        events: getAllEvents(),\n        selectedEvent: null\n      }\n    },\n    methods: {\n      onClickButton (event) {\n            this.selectedEvent=event;\n            this.$emit('selected', this.selectedEvent)\n          }\n    },\n    computed: {\n\n    }\n}\n\n\n</script>\n\n<style scoped lang=\"scss\">\n  .eventButton {\n    margin-top: 15px;\n    padding-top: 20px;\n    padding-bottom: 20px;\n  }\n</style>\n"]}]}